Build an advanced AI-powered project called "Bengaluru Air Quality Monitoring & Pollution Prediction Agent" with the following top-level features:

üåç Data & API Integration

Fetch real-time Bengaluru weather + AQI data from OpenWeather API (API key stored in .env).

Track pollutants: PM2.5, PM10, CO, O‚ÇÉ, NO‚ÇÇ, SO‚ÇÇ.

Collect and store historical data in a lightweight local DB (better-sqlite3).

Auto-scheduler (cron or setInterval) to fetch and log data every 10‚Äì15 minutes.

ü§ñ Machine Learning & Prediction

Train a time-series forecasting model (LSTM or GRU using TensorFlow.js or Python bridge).

Predict next 24/48/72 hours AQI levels with confidence intervals.

Detect anomalies in air quality (e.g., sudden spike in PM2.5).

Adaptive learning: model retrains periodically as new data flows in.

Compare prediction accuracy using metrics like RMSE / MAE.

üé® Premium UI/UX (Dashboard)

Modern React dashboard (Vite/Next.js + TailwindCSS + ShadCN UI).

Live cards:

Current AQI (with health category: Good, Moderate, Unhealthy).

Current weather (temp, humidity, wind).

Interactive charts (Recharts / Chart.js / D3.js):

Historical AQI trends.

Pollution predictions with confidence bands.

City selector (default Bengaluru, expandable to other Indian cities).

Dark/Light mode with smooth animations (Framer Motion).

Map View: show Bengaluru on map with AQI color overlay (Leaflet.js / Mapbox).

Mobile-first responsive layout.

‚ö° Smart Features

Health Advisory AI Agent: suggest precautions (e.g., ‚ÄúWear a mask‚Äù, ‚ÄúSafe for outdoor exercise‚Äù).

Notification System:

Send alerts when AQI crosses dangerous thresholds.

Email/push/desktop notifications.

Export Options: download historical AQI dataset as CSV/JSON.

Insights Panel: show daily average AQI, pollution sources, and safe vs unsafe hours.

Search & Filter: filter data by date range, pollutant type, or severity.

üîß Backend & Optimization

Node.js + Express backend for API routes.

better-sqlite3 for efficient, low-overhead storage.

Modular codebase (separate layers for API, ML, DB, UI).

Environment variables managed in .env.

Caching recent API calls to reduce OpenWeather usage.

Option to plug in external AQI APIs later.